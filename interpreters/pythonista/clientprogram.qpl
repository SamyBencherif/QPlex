---
Available vars:
  mx my mb
  if controller available:
      controller buttons
      < > ^ v a b c x y z

functions:
  tri rgba xy xy xy 
  FILE(path) # can be read, set to like a var
  print
    -- the first invocation
    will fail if no terminal is available,
    it will create/open one if necessary
    prints without newline

operators:
  + - / *
  & | ~
  % 
  < > ==

comments:
  block start is three dashes
  block end is same

  line comment is //

structures:
  object {}
  obj[key] = value
  obj[key] == value

  number

memory:
  var = value
  mem.var == value
  FILE(path) = mem

control:
  fn noop(x)
  {
    return x,
  }
  // function def shorthand 1
  fn (x) {return x,}
  // code block shorthand
  fn (x) x,

  fn doTwice(f, x)
  {
    return f(f(x))
  }
  3 == (doTwice {
    return x+1
  })(1)

  // you can implement for:
  fn for(initial, condition, step, F)
  {
    x = initial
    while condition(x) {
      F(x)
      x = step(x)
    }
  }
  //for (0, fn(i) i<10, fn(i) i+1) {
  for (0, i:i<10, i:i+1) {
    // code
  }
  
  // function definition shorthand 2
  x,y: {
  }

  // while
  while cnd {
    // code
  }

  // and that's it.
  // you can implement if:
  fn if (cnd, F)
  {
    while (cnd) {
      F()
      cnd = 0
    }
  }
  if (x<3) {
  }

--- baseprogram.qpl ---
This is my kitchen sink common code library

fuck it
I will make the MOST minimal spec
and include a baseprogram.qpl
which implements many handy functions

# check if these buttons are already defined
# by the implementation
# if not manage them using virtual buttons
d-pad + 6 btns
   [^]           [y]
[<][c][>]     [x][z][b]
   [v]           [a]

Left one can use swipes/taps analog

showkbd
hidekbd
kbdinput

so i don't have to reimplement line, and rect
a million times

line xy xy t
text msg x y cw ch
color r g b a
rect xy wh
---
