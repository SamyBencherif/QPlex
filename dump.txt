I will target Pythonista first.

Let's start by seeing if the emulator is any good.
Desired Features:

  Input
    Single-Touch / Mouse-Down
      ...data comes as 3-bytes (mouseDown, mouseX, mouseY)
      ...if mouseDown is 0, then mouseX and mouseY should
      ...be discarded
      ...values mousePressed and mouseRelease can be 
      ...inferred by storing the previous mouse state
      ...in a variable such as mouseWasDown (set 0 on 
      ...first frame)
      ...then mousePressed = mouseDown & !mouseWasDown
      ...and mouseReleased = !mouseDown & mouseWasDown
    Typed
    6-Button
      ...requires polyfill. platforms consisting of or
      ...able to emulate a D-PAD and two action buttons
      ...can map to this input style directly
      ...otherwise swipes, tap, and two-finger or double
      ...tap can be used on a touch screen and
      ...WASD-ZX or UP,RIGHT,DOWN,LEFT,Z,X can be used
      ...via keyboard
  Drawing
    Shader
      ...fragment shader
      ...uniform width, height, time
      ...uniform md, mx, my
      ...display maps x [0,1] y [0,1]
      ...x+ right, y+ down
      ...shader is drawn after all
      ...other calls
    Color
      ...even the main buffer support alpha, which
      ...can be useful for shaders
    Triangle-Fill
      ...varies color
    Path-Stroke
      ...straight line from point to point
      ...varies color
      ...varies thickness
      ...varies thickness-expression
        ...ie drawing a stream of squares/circles/etc
      ...a single vertex with thickness=1 should blit a 
      ...single pixel
    Text-Fill
      ...in order to look exactly the same on all 
      ...platforms I will use a personal bitmap
      ...font converted to C-style data format
  Filesystem
    Program-Database
      ...for example if my program is called demo
      ...there will be a file called demo.programdata
      ...which contains any necessary persistent data
  Program-Execution
    ...the previous entries in this desired-feature
    ...list constitute features that host platforms
    ...will need to support. Among those are program
    ...execution capabilities. This is the one
    ...category of requirements that does not need
    ...to be propagated to the client (such as an
    ...in-code eval function).
      ...at most the client could point the
      ...interpreter to an entirely different file
      ...to run
    ...program execution capabilities will be drawn
    ...from the simplest target platform ANSI-C
    Character-Input
    Static-Strings
    String-Comparison
    ...Actually fuck it... I'll make a C-like language
                                     (I ended up not doing that)
  Misc (bonus, where applicable)     (designed a new lang) (and using actual C seperately for bindings)
    ... i'm never going to implement these lol
    HTTP-Request
    Microphone Input
    Camera Input
    Accelerometer Input
    GPS Input
    ***TEXTURES***
    (shaders)

                              Platform         =   Pythonista                           = Raylib   = RMKitSimple             =  P5.js
================================================================================================================================================
Requirements         =  Implementation Notes   = ====================================== = ======== = ======================= = =============== =
================================================================================================================================================
----- INPUT ---------=-------------------------=----------------------------------------=----------=-------------------------=------------------
================================================================================================================================================
      Single-Touch   = ----------------------- =                                        =          =                         =                 =
     or Mouse-Down   = ----------------------- =    touch                               =  mouse   =    touch                =    mouse        =
================================================================================================================================================
      Typed          = ----------------------- = ui module has virtual keyboard         = keyboard = use virtual buttons     = keyboard        =
================================================================================================================================================
      6-Button       = ----------------------- = use swipes and taps                    = keyboard = use virtual buttons     = keyboard        =
================================================================================================================================================
----- DRAWING -------=-------------------------=----------------------------------------=----------=-------------------------=------------------
================================================================================================================================================
      Shader         = ----------------------- =                                        =          = CPU Fallback only       =                 =
================================================================================================================================================
      Color          = ----------------------- =                                        =          = grayscale-16            =                 =
================================================================================================================================================
      Screen Alpha   = ----------------------- = NO                                     =          = NO                      =                 =
================================================================================================================================================
      Triangle-Fill  = ----------------------- =                                        =          = ???                     =                 =
================================================================================================================================================
      Path-Stroke    = ----------------------- =                                        =          = ???                     =                 =
================================================================================================================================================
      Text-Fill      = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
      Bitmap Font    = ----------------------- =                                        =          = Probably                =                 =
================================================================================================================================================
      Immediate-GUI  = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
----- PERSISTENCE ---=-------------------------=----------------------------------------=----------=-------------------------=------------------
================================================================================================================================================ 
      R/W Filesystem = ----------------------- =                                        =          =                         = NO              =
================================================================================================================================================
-- PROGRAM-EXECUTION =-------------------------=----------------------------------------=----------=-------------------------=------------------
================================================================================================================================================
      R Filesystem   = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
      Branching      = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
      Loops          = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
      Memory         = ----------------------- =                                        =          =                         =                 =
================================================================================================================================================
if blank, assume YES                                                                                (rmkit.h might be better)
functions:     [A-Zaz]*\s*(args)
  print                                              control:                              
    -- the first invocation                            fn noop(x)                          
    will fail if no terminal is available,             {                                                    // while                 
    it will create/open one if necessary                 return x                                          while cnd {              
    prints without newline                             }                                                      // code                

assignment: x=5
                                                       // function def shorthand 1                          }                        
operators:      (listed)                               fn (x) {return x,}                                                            
  + - / * //                                           // code block shorthand                              // and that's it.        
  & | ~                                                fn (x) x,                                            // you can implement if: 
  %                                                                                                         fn if (cnd, F)           
  < > == <= >=                                          fn doTwice(f, x)                                     {                        
                                                       {                                                      while (cnd) {          
comments:      ---   //                                  return f(f(x))                                         F()                  
  block start is three dashes                          }                                                        cnd = 0              
  block end is same                                    3 == (doTwice {                                        }                      
                                                         return x+1                                         }                        
  line comment is //                                   })(1)                                                if (x<3) {               
                                                                                                            }                        
structures:  [A-Z]\[*\s*\]                                 // you can implement for:           
  object {}                                            fn for(initial, condition, step, F) 
  obj[key] = value                                     {                                   
  obj[key] == value                                      x = initial                       
                                                         while condition(x) {              
  number                                                   F(x)                            
                                                           x = step(x)                     
memory:                                                  }                                 
  var = value                                          }                                   
  mem.var == value                                     //for (0, fn(i) i<10, fn(i) i+1) {  
  FILE(path) = mem                                     for (0, i:i<10, i:i+1) {            
                                                         // code                           
                                                       }                                   
       screen=...                                                                                    
       use assignment instead of functions to move data!! // function definition shorthand 2  
                                                       x,y: {                              
                                                       }                                   
                                                                                           
   :{}  empty function no args
   {} empty object/list
   {1,2,3,4} 0-index list   (can be treated like an obj too)
   {1:1,2:2,3:3} object   (would be an empty list)
   {0:0, 1:1,2:2,3:3} object  (and also a non-empty list!)











        (1)     fn noop(x)                         
                {                                  
                  return x                         
                }                                  
                                                   
        (2)     name-value

                // function def shorthand 1        
        (3)     fn (x) {return x,}                 
                // code block shorthand            
        (4)     fn (x) x,                          
                                                   
                fn doTwice(f, x)                   
                {                                  
                  return f(f(x))                   
                }                                  
                3 == (doTwice {                    
                  return x+1                       
                })(1)                              
                                                   
                    // you can implement for:      
                fn for(initial, condition, step, F)
                {                                  
                  x = initial                      
                  while condition(x) {             
                    F(x)                           
                    x = step(x)                    
                  }                                
                }                                  
                //for (0, fn(i) i<10, fn(i) i+1) { 
                for (0, i:i<10, i:i+1) {           
                  // code                          
                }                                  
                                                   
                !! // function definition shorthand
          (5)   x,y: {                             
                }                                  

          (6)   :{}  anonymous fn


# list of functions
# uniary   uniary   noarg
[ y:{...}, z:{...}, :{...} ]

# list of lists/objects
# key-y    key-z     key-0
[ y [...], z [...], [...] ]
[ y:[...], z:[...], [...] ]

---
Available vars:
  mx my mb
  if controller available:
      controller buttons
      < > ^ v a b c x y z

functions:
  tri rgba xy xy xy 
  FILE(path) # can be read, set to like a var
  print
    -- the first invocation
    will fail if no terminal is available,
    it will create/open one if necessary
    prints without newline

operators:
  + - / *
  & | ~
  % 
  < > ==

comments:
  block start is three dashes
  block end is same

  line comment is //

structures:
  object {}
  obj[key] = value
  obj[key] == value

  number

memory:
  var = value
  mem.var == value
  FILE(path) = mem

control:
  fn noop(x)
  {
    return x,
  }
  // function def shorthand 1
  fn (x) {return x,}
  // code block shorthand
  fn (x) x,

  fn doTwice(f, x)
  {
    return f(f(x))
  }
  3 == (doTwice {
    return x+1
  })(1)

  // you can implement for:
  fn for(initial, condition, step, F)
  {
    x = initial
    while condition(x) {
      F(x)
      x = step(x)
    }
  }
  //for (0, fn(i) i<10, fn(i) i+1) {
  for (0, i:i<10, i:i+1) {
    // code
  }
  
  // function definition shorthand 2
  x,y: {
  }

  // while
  while cnd {
    // code
  }

  // and that's it.
  // you can implement if:
  fn if (cnd, F)
  {
    while (cnd) {
      F()
      cnd = 0
    }
  }
  if (x<3) {
  }

--- baseprogram.qpl ---
This is my kitchen sink common code library

fuck it
I will make the MOST minimal spec
and include a baseprogram.qpl
which implements many handy functions

# check if these buttons are already defined
# by the implementation
# if not manage them using virtual buttons
d-pad + 6 btns
   [^]           [y]
[<][c][>]     [x][z][b]
   [v]           [a]

Left one can use swipes/taps analog

showkbd
hidekbd
kbdinput

so i don't have to reimplement line, and rect
a million times

line xy xy t
text msg x y cw ch
color r g b a
rect xy wh
---
