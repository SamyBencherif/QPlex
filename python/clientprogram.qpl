functions:     [A-Zaz]*\s*(args)
  print                                              control:                              
    -- the first invocation                            fn noop(x)                          
    will fail if no terminal is available,             {                                                    // while                 
    it will create/open one if necessary                 return x                                          while cnd {              
    prints without newline                             }                                                      // code                

assignment: x=5
                                                       // function def shorthand 1                          }                        
operators:      (listed)                               fn (x) {return x,}                                                            
  + - / * //                                           // code block shorthand                              // and that's it.        
  & | ~                                                fn (x) x,                                            // you can implement if: 
  %                                                                                                         fn if (cnd, F)           
  < > == <= >=                                          fn doTwice(f, x)                                     {                        
                                                       {                                                      while (cnd) {          
comments:      ---   //                                  return f(f(x))                                         F()                  
  block start is three dashes                          }                                                        cnd = 0              
  block end is same                                    3 == (doTwice {                                        }                      
                                                         return x+1                                         }                        
  line comment is //                                   })(1)                                                if (x<3) {               
                                                                                                            }                        
structures:  [A-Z]\[*\s*\]                                 // you can implement for:           
  object {}                                            fn for(initial, condition, step, F) 
  obj[key] = value                                     {                                   
  obj[key] == value                                      x = initial                       
                                                         while condition(x) {              
  number                                                   F(x)                            
                                                           x = step(x)                     
memory:                                                  }                                 
  var = value                                          }                                   
  mem.var == value                                     //for (0, fn(i) i<10, fn(i) i+1) {  
  FILE(path) = mem                                     for (0, i:i<10, i:i+1) {            
                                                         // code                           
                                                       }                                   
       screen=...                                                                                    
       use assignment instead of functions to move data!! // function definition shorthand 2  
                                                       x,y: {                              
                                                       }                                   
                                                                                           
   :{}  empty function no args
   {} empty object/list
   {1,2,3,4} 0-index list   (can be treated like an obj too)
   {1:1,2:2,3:3} object   (would be an empty list)
   {0:0, 1:1,2:2,3:3} object  (and also a non-empty list!)











        (1)     fn noop(x)                         
                {                                  
                  return x                         
                }                                  
                                                   
        (2)     name-value

                // function def shorthand 1        
        (3)     fn (x) {return x,}                 
                // code block shorthand            
        (4)     fn (x) x,                          
                                                   
                fn doTwice(f, x)                   
                {                                  
                  return f(f(x))                   
                }                                  
                3 == (doTwice {                    
                  return x+1                       
                })(1)                              
                                                   
                    // you can implement for:      
                fn for(initial, condition, step, F)
                {                                  
                  x = initial                      
                  while condition(x) {             
                    F(x)                           
                    x = step(x)                    
                  }                                
                }                                  
                //for (0, fn(i) i<10, fn(i) i+1) { 
                for (0, i:i<10, i:i+1) {           
                  // code                          
                }                                  
                                                   
                !! // function definition shorthand
          (5)   x,y: {                             
                }                                  

          (6)   :{}  anonymous fn


# list of functions
# uniary   uniary   noarg
[ y:{...}, z:{...}, :{...} ]

# list of lists/objects
# key-y    key-z     key-0
[ y [...], z [...], [...] ]
[ y:[...], z:[...], [...] ]

